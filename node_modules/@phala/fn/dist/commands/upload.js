"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const sdk_1 = require("@phala/sdk");
const PhatBaseCommand_1 = tslib_1.__importDefault(require("../lib/PhatBaseCommand"));
class Upload extends PhatBaseCommand_1.default {
    async run() {
        var _a;
        const rpc = this.parsedFlags.rpc || (await this.promptRpc());
        const consumerAddress = this.parsedFlags.consumerAddress || (await this.promptConsumerAddress());
        const pair = await this.getDecodedPair({
            suri: this.parsedFlags.suri || process.env.POLKADOT_WALLET_SURI,
            accountFilePath: this.parsedFlags.accountFilePath || process.env.POLKADOT_WALLET_ACCOUNT_FILE,
            accountPassword: this.parsedFlags.accountPassword || process.env.POLKADOT_WALLET_ACCOUNT_PASSWORD,
        });
        const buildScriptPath = await this.buildOrGetScriptPath();
        // Step 1: Connect to the endpoint.
        const endpoint = this.getEndpoint();
        const [apiPromise, registry, cert] = await this.connect({
            endpoint,
            pair,
        });
        // Step 2: Query the brick profile contract id.
        this.action.start('Querying your Brick Profile contract ID');
        const brickProfileContractId = await this.getBrickProfileContractId({
            endpoint,
            registry,
            apiPromise,
            pair,
            cert,
        });
        this.action.succeed(`Your Brick Profile contract ID: ${brickProfileContractId}`);
        // Step 3: Instantiating the ActionOffchainRollup contract.
        this.action.start('Instantiating the ActionOffchainRollup contract');
        const brickProfileAbi = await this.loadAbiByContractId(registry, brickProfileContractId);
        const brickProfileContractKey = await registry.getContractKeyOrFail(brickProfileContractId);
        const brickProfile = new sdk_1.PinkContractPromise(apiPromise, registry, brickProfileAbi, brickProfileContractId, brickProfileContractKey);
        const rollupAbi = await this.getRollupAbi();
        const blueprint = new sdk_1.PinkBlueprintPromise(apiPromise, registry, rollupAbi, rollupAbi.info.source.wasmHash.toHex());
        const result = await blueprint.send.withConfiguration({ cert, address: pair.address, pair }, rpc, consumerAddress, node_fs_1.default.readFileSync(buildScriptPath, 'utf8'), this.parsedFlags.coreSettings || '', brickProfileContractId);
        await result.waitFinalized();
        const contractPromise = result.contract;
        this.action.succeed(`The ActionOffchainRollup contract has been instantiated: ${contractPromise.address.toHex()}`);
        // Step 4: Select an external account.
        const externalAccountId = await this.promptEvmAccountId({
            contract: brickProfile,
            cert,
        });
        // Step 5: Checking your settings.
        this.action.start('Checking your settings');
        const { output: attestorQuery } = await contractPromise.query.getAttestAddress(cert.address, { cert });
        const attestor = attestorQuery.asOk.toHex();
        const selectorUint8Array = (_a = rollupAbi.messages
            .find((i) => i.identifier === 'answer_request')) === null || _a === void 0 ? void 0 : _a.selector.toU8a();
        const selector = Buffer.from(selectorUint8Array).readUIntBE(0, selectorUint8Array.length);
        const actions = [
            {
                cmd: 'call',
                config: {
                    codeHash: rollupAbi.info.source.wasmHash.toHex(),
                    callee: contractPromise.address.toHex(),
                    selector,
                    input: [],
                },
            },
            {
                cmd: 'log',
            },
        ];
        const { output: numberQuery } = await brickProfile.query.workflowCount(pair.address, { cert });
        const num = numberQuery.asOk.toNumber();
        this.action.succeed();
        const projectName = await this.promptProjectName(`My Phat Contract ${numberQuery.asOk.toNumber()}`);
        // Step 6: Setting up the actions.
        this.action.start('Setting up the actions');
        const result2 = await brickProfile.send.addWorkflowAndAuthorize({ cert, address: pair.address, pair }, projectName, JSON.stringify(actions), externalAccountId);
        await result2.waitFinalized();
        this.action.succeed(`ðŸŽ‰ Your workflow has been added, you can check it out here: https://bricks.phala.network/workflows/${brickProfileContractId}/${num}`);
        this.log('Your Attestor address:', attestor);
        this.log('Your WORKFLOW_ID:', numberQuery.asOk.toNumber());
        process.exit(0);
    }
}
Upload.description = 'Upload JS to Phat Contract';
Upload.args = {
    ...PhatBaseCommand_1.default.args
};
Upload.flags = {
    ...PhatBaseCommand_1.default.flags
};
exports.default = Upload;
