"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const core_1 = require("@oclif/core");
const sdk_1 = require("@phala/sdk");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const PhatBaseCommand_1 = tslib_1.__importDefault(require("../lib/PhatBaseCommand"));
class Update extends PhatBaseCommand_1.default {
    async run() {
        const workflowId = await this.getWorkflowId();
        const pair = await this.getDecodedPair({
            suri: this.parsedFlags.suri || process.env.POLKADOT_WALLET_SURI,
            accountFilePath: this.parsedFlags.accountFilePath || process.env.POLKADOT_WALLET_ACCOUNT_FILE,
            accountPassword: this.parsedFlags.accountPassword || process.env.POLKADOT_WALLET_ACCOUNT_PASSWORD,
        });
        const buildScriptPath = await this.buildOrGetScriptPath();
        // Step 1: Connect to the endpoint.
        const endpoint = this.getEndpoint();
        const [apiPromise, registry, cert] = await this.connect({
            endpoint,
            pair,
        });
        // Step 2: Query the brick profile contract id.
        this.action.start('Querying your Brick Profile contract ID');
        const brickProfileContractId = await this.getBrickProfileContractId({
            endpoint,
            registry,
            apiPromise,
            pair,
            cert,
        });
        this.action.succeed(`Your Brick Profile contract ID: ${brickProfileContractId}`);
        // Step 3: Check current user workflow settings.
        this.action.start('Checking your workflow settings');
        const brickProfileAbi = await this.loadAbiByContractId(registry, brickProfileContractId);
        const brickProfileContractKey = await registry.getContractKeyOrFail(brickProfileContractId);
        const brickProfile = new sdk_1.PinkContractPromise(apiPromise, registry, brickProfileAbi, brickProfileContractId, brickProfileContractKey);
        const { output: workflowQuery } = await brickProfile.query.getWorkflow(pair.address, { cert }, workflowId);
        if (!workflowQuery.isOk || !workflowQuery.asOk.isOk) {
            this.error('Workflow not found.');
        }
        const actions = JSON.parse(workflowQuery.asOk.asOk.commandline.toString());
        const rollupAbi = await this.getRollupAbi();
        if (actions[0].config.codeHash !== rollupAbi.info.source.wasmHash.toHex()) {
            this.error(`The codeHash of the workflow is not matched with the ActionOffchainRollup contract.\nExpected: ${actions[0].config.codeHash}\nActual: ${rollupAbi.info.source.wasmHash.toHex()}\n`);
        }
        this.action.stop();
        // Step 4: Update the JS.
        this.action.start('Updating');
        const actionOffchainRollupContractId = actions[0].config.callee;
        const rollupContractKey = await registry.getContractKeyOrFail(actionOffchainRollupContractId);
        const rollupContract = new sdk_1.PinkContractPromise(apiPromise, registry, rollupAbi, actionOffchainRollupContractId, rollupContractKey);
        await rollupContract.send.configCoreScript({ cert, address: pair.address, pair }, node_fs_1.default.readFileSync(buildScriptPath, 'utf8'));
        this.action.succeed(`The JavaScript code for workflow ${workflowId} has been updated.`);
        this.exit(0);
    }
    async getWorkflowId() {
        let { workflowId } = this.parsedFlags;
        if (workflowId === undefined) {
            if (process.env.WORKFLOW_ID !== undefined && !isNaN(parseFloat(process.env.WORKFLOW_ID))) {
                workflowId = Number(process.env.WORKFLOW_ID);
            }
            else {
                workflowId = await this.promptWorkflowId();
            }
        }
        if (isNaN(workflowId)) {
            return this.error('Invalid workflow ID: Must be a number or numeric string.');
        }
        return workflowId;
    }
    async promptWorkflowId(message = 'Please enter your workflow ID') {
        const { workflowId } = await inquirer_1.default.prompt([
            {
                name: 'workflowId',
                type: 'input',
                message,
            },
        ]);
        return Number(workflowId);
    }
}
Update.description = 'Update Phat Contract JS';
Update.args = {
    ...PhatBaseCommand_1.default.args
};
Update.flags = {
    ...PhatBaseCommand_1.default.flags,
    workflowId: core_1.Flags.integer({
        description: 'Workflow ID',
        required: false,
    }),
};
exports.default = Update;
