import { OnChainRegistry, PinkContractPromise, PinkContractQuery, type CertificateData } from '@phala/sdk';
import { ApiPromise } from '@polkadot/api';
import { Abi } from '@polkadot/api-contract';
import { type KeyringPair } from '@polkadot/keyring/types';
import type { Result, Vec, u64, u8, Text, Struct } from '@polkadot/types';
import BaseCommand from '../lib/BaseCommand';
export interface ParsedFlags {
    readonly build: boolean;
    readonly webpack: string;
    readonly endpoint: string;
    readonly mode: string;
    readonly brickProfileFactory: string;
    readonly rpc: string;
    readonly consumerAddress: string;
    readonly suri: string;
    readonly accountFilePath: string;
    readonly accountPassword: string;
    readonly coreSettings: string;
    readonly pruntimeUrl: string;
    readonly externalAccountId: string;
}
interface ParsedArgs {
    readonly script: string;
}
export interface ExternalAccountCodec extends Struct {
    id: u64;
    address: Vec<u8>;
    rpc: Text;
}
export type BrickProfileContract = PinkContractPromise<{
    getAllEvmAccounts: PinkContractQuery<[
    ], Result<Vec<ExternalAccountCodec>, any>>;
}>;
export default abstract class PhatBaseCommand extends BaseCommand {
    static args: {
        script: import("@oclif/core/lib/interfaces/parser").Arg<string, Record<string, unknown>>;
    };
    static flags: {
        envFilePath: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        accountFilePath: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        accountPassword: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        suri: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        endpoint: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        rpc: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        brickProfileFactory: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        consumerAddress: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        coreSettings: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        pruntimeUrl: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        externalAccountId: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        mode: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        build: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    parsedFlags: ParsedFlags;
    parsedArgs: ParsedArgs;
    init(): Promise<void>;
    getEndpoint(): string;
    getBrickProfileFactoryContractId(endpoint: string): Promise<string>;
    getBrickProfileContractId({ endpoint, registry, apiPromise, pair, cert, }: {
        endpoint: string;
        registry: OnChainRegistry;
        apiPromise: ApiPromise;
        pair: KeyringPair;
        cert: CertificateData;
    }): Promise<`0x${string}`>;
    connect({ endpoint, pair, }: {
        endpoint: string;
        pair: KeyringPair;
    }): Promise<[ApiPromise, OnChainRegistry, CertificateData]>;
    getRollupAbi(): Promise<Abi>;
    buildOrGetScriptPath(): Promise<string>;
    promptEvmAccountId({ contract, cert, }: {
        contract: BrickProfileContract;
        cert: CertificateData;
    }): Promise<any>;
    promptProjectName(defaultName: string): Promise<string>;
    promptRpc(message?: string): Promise<string>;
    promptConsumerAddress(message?: string): Promise<string>;
    promptBrickProfileFactory(message?: string): Promise<string>;
    getDecodedPair({ suri, accountFilePath, accountPassword }: {
        suri?: string;
        accountFilePath?: string;
        accountPassword?: string;
    }): Promise<KeyringPair>;
    requestPairDecoding(pair: KeyringPair, options: {
        password?: string;
        message?: string;
    }): Promise<KeyringPair>;
    promptForPassword(message?: string): Promise<string>;
    promptForSuri(message?: string): Promise<string>;
    loadAbiByCodeHash(codeHash: string): Promise<string | Record<string, unknown>>;
    loadAbiByContractId(registry: OnChainRegistry, contractId: string): Promise<string | Record<string, unknown>>;
}
export {};
